// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/G-Villarinho/fast-feet-api/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RecipientService is an autogenerated mock type for the RecipientService type
type RecipientService struct {
	mock.Mock
}

// CreateRecipient provides a mock function with given fields: ctx, payload
func (_m *RecipientService) CreateRecipient(ctx context.Context, payload models.CreateRecipientPayload) (*models.CreateRecipientResponse, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipient")
	}

	var r0 *models.CreateRecipientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRecipientPayload) (*models.CreateRecipientResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateRecipientPayload) *models.CreateRecipientResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreateRecipientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateRecipientPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecipient provides a mock function with given fields: ctx, recipientID
func (_m *RecipientService) DeleteRecipient(ctx context.Context, recipientID uuid.UUID) error {
	ret := _m.Called(ctx, recipientID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecipient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, recipientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecipient provides a mock function with given fields: ctx, recipientID
func (_m *RecipientService) GetRecipient(ctx context.Context, recipientID uuid.UUID) (*models.RecipientResponse, error) {
	ret := _m.Called(ctx, recipientID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipient")
	}

	var r0 *models.RecipientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.RecipientResponse, error)); ok {
		return rf(ctx, recipientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.RecipientResponse); ok {
		r0 = rf(ctx, recipientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RecipientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, recipientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipientsBasicInfo provides a mock function with given fields: ctx, pagination
func (_m *RecipientService) GetRecipientsBasicInfo(ctx context.Context, pagination *models.RecipientBasicInfoPagination) (*models.PaginatedResponse[*models.RecipientBasicInfoResponse], error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipientsBasicInfo")
	}

	var r0 *models.PaginatedResponse[*models.RecipientBasicInfoResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RecipientBasicInfoPagination) (*models.PaginatedResponse[*models.RecipientBasicInfoResponse], error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.RecipientBasicInfoPagination) *models.PaginatedResponse[*models.RecipientBasicInfoResponse]); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaginatedResponse[*models.RecipientBasicInfoResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.RecipientBasicInfoPagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecipient provides a mock function with given fields: ctx, recipientID, payload
func (_m *RecipientService) UpdateRecipient(ctx context.Context, recipientID uuid.UUID, payload models.UpdateRecipientPayload) (*models.RecipientResponse, error) {
	ret := _m.Called(ctx, recipientID, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecipient")
	}

	var r0 *models.RecipientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateRecipientPayload) (*models.RecipientResponse, error)); ok {
		return rf(ctx, recipientID, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UpdateRecipientPayload) *models.RecipientResponse); ok {
		r0 = rf(ctx, recipientID, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RecipientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.UpdateRecipientPayload) error); ok {
		r1 = rf(ctx, recipientID, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecipientService creates a new instance of RecipientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipientService {
	mock := &RecipientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
